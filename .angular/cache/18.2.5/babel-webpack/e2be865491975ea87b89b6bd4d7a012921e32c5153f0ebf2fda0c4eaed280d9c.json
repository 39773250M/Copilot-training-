{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/users/users.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nfunction PatientRegistrationComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PatientRegistrationComponent_div_12_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Name must be at least 2 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PatientRegistrationComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, PatientRegistrationComponent_div_12_div_1_Template, 2, 0, \"div\", 15)(2, PatientRegistrationComponent_div_12_div_2_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    let tmp_2_0;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.registrationForm.get(\"name\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r0.registrationForm.get(\"name\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.minlength);\n  }\n}\nfunction PatientRegistrationComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Mobile number is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PatientRegistrationComponent_div_17_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Mobile number must be 10 digits.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PatientRegistrationComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, PatientRegistrationComponent_div_17_div_1_Template, 2, 0, \"div\", 15)(2, PatientRegistrationComponent_div_17_div_2_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    let tmp_2_0;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.registrationForm.get(\"mobileNumber\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r0.registrationForm.get(\"mobileNumber\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.pattern);\n  }\n}\nexport class PatientRegistrationComponent {\n  constructor(usersService, http, router, fb) {\n    this.usersService = usersService;\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.newPatient = {\n      name: '',\n      mobileNumber: ''\n    };\n    this.registrationForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\n    });\n  }\n  ngOnInit() {}\n  registerPatient() {\n    if (this.registrationForm.valid) {\n      const patientData = {\n        name: this.newPatient.name,\n        mobileNumber: this.newPatient.mobileNumber,\n        type: 'patient',\n        password: 'pwd'\n      };\n      this.usersService.createUser(patientData).subscribe(response => {\n        console.log('Patient registered successfully:', response);\n        this.router.navigate(['/patients']);\n      }, error => {\n        console.error('Error registering patient:', error);\n      });\n    }\n  }\n  static {\n    this.ɵfac = function PatientRegistrationComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PatientRegistrationComponent)(i0.ɵɵdirectiveInject(i1.UsersService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PatientRegistrationComponent,\n      selectors: [[\"app-patient-registration\"]],\n      decls: 20,\n      vars: 4,\n      consts: [[1, \"container\", \"mt-4\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\", \"mb-4\"], [1, \"card-body\"], [1, \"card-title\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"mobileNumber\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"mobileNumber\", \"formControlName\", \"mobileNumber\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n      template: function PatientRegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\", 5);\n          i0.ɵɵtext(6, \"Register New Patient\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"form\", 6);\n          i0.ɵɵlistener(\"ngSubmit\", function PatientRegistrationComponent_Template_form_ngSubmit_7_listener() {\n            return ctx.registerPatient();\n          });\n          i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n          i0.ɵɵtext(10, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 9);\n          i0.ɵɵtemplate(12, PatientRegistrationComponent_div_12_Template, 3, 2, \"div\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 7)(14, \"label\", 11);\n          i0.ɵɵtext(15, \"Mobile Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 12);\n          i0.ɵɵtemplate(17, PatientRegistrationComponent_div_17_Template, 3, 2, \"div\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"button\", 13);\n          i0.ɵɵtext(19, \"Register\");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registrationForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.registrationForm.get(\"name\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registrationForm.get(\"mobileNumber\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.registrationForm.get(\"mobileNumber\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.registrationForm.invalid);\n        }\n      },\n      dependencies: [i5.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n      styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","PatientRegistrationComponent_div_12_div_1_Template","PatientRegistrationComponent_div_12_div_2_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","ctx_r0","registrationForm","get","errors","required","tmp_2_0","minlength","PatientRegistrationComponent_div_17_div_1_Template","PatientRegistrationComponent_div_17_div_2_Template","pattern","PatientRegistrationComponent","constructor","usersService","http","router","fb","newPatient","name","mobileNumber","group","minLength","ngOnInit","registerPatient","valid","patientData","type","password","createUser","subscribe","response","console","log","navigate","error","ɵɵdirectiveInject","i1","UsersService","i2","HttpClient","i3","Router","i4","FormBuilder","selectors","decls","vars","consts","template","PatientRegistrationComponent_Template","rf","ctx","ɵɵlistener","PatientRegistrationComponent_Template_form_ngSubmit_7_listener","ɵɵelement","PatientRegistrationComponent_div_12_Template","PatientRegistrationComponent_div_17_Template","invalid","touched"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\patient-registration\\patient-registration.component.ts","E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\patient-registration\\patient-registration.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { UsersService } from 'src/services/users/users.service';\r\n\r\n@Component({\r\n  selector: 'app-patient-registration',\r\n  templateUrl: './patient-registration.component.html',\r\n  styleUrls: ['./patient-registration.component.css']\r\n})\r\nexport class PatientRegistrationComponent  implements OnInit{\r\n  registrationForm: FormGroup;\r\n  newPatient: any = {\r\n    name: '',\r\n    mobileNumber: ''\r\n  };\r\n\r\n  constructor(private usersService: UsersService,private http: HttpClient, private router: Router, private fb:FormBuilder) {\r\n    this.registrationForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(2)]],\r\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\r\n    });\r\n\r\n  }\r\n  ngOnInit(): void {}\r\n\r\n  registerPatient(): void {\r\n    if (this.registrationForm.valid) {\r\n    const patientData = {\r\n      name: this.newPatient.name,\r\n      mobileNumber: this.newPatient.mobileNumber,\r\n      type: 'patient',\r\n      password: 'pwd'\r\n    };\r\n\r\n    this.usersService.createUser(patientData).subscribe(\r\n      (response: any) => {\r\n        console.log('Patient registered successfully:', response);\r\n        this.router.navigate(['/patients']);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error registering patient:', error);\r\n      }\r\n    );\r\n  }\r\n  }\r\n}\r\n","<div class=\"container mt-4\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-body\">\r\n          <h2 class=\"card-title\">Register New Patient</h2>\r\n          <form [formGroup]=\"registrationForm\" (ngSubmit)=\"registerPatient()\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"name\" class=\"form-label\">Name</label>\r\n              <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\r\n              <div *ngIf=\"registrationForm.get('name')?.invalid && registrationForm.get('name')?.touched\" class=\"text-danger\">\r\n                <div *ngIf=\"registrationForm.get('name')?.errors?.required\">Name is required.</div>\r\n                <div *ngIf=\"registrationForm.get('name')?.errors?.minlength\">Name must be at least 2 characters long.</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"mobileNumber\" class=\"form-label\">Mobile Number</label>\r\n              <input type=\"text\" id=\"mobileNumber\" class=\"form-control\" formControlName=\"mobileNumber\">\r\n              <div *ngIf=\"registrationForm.get('mobileNumber')?.invalid && registrationForm.get('mobileNumber')?.touched\" class=\"text-danger\">\r\n                <div *ngIf=\"registrationForm.get('mobileNumber')?.errors?.required\">Mobile number is required.</div>\r\n                <div *ngIf=\"registrationForm.get('mobileNumber')?.errors?.pattern\">Mobile number must be 10 digits.</div>\r\n              </div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"registrationForm.invalid\">Register</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}