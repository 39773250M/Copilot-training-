{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet PatientRegistrationComponent = class PatientRegistrationComponent {\n  constructor(usersService, http, router, fb) {\n    this.usersService = usersService;\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.successMessage = '';\n    this.newPatient = {\n      name: '',\n      mobileNumber: ''\n    };\n    this.registrationForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\n    });\n  }\n  ngOnInit() {\n    // Clear the success message when the form values change\n    this.registrationForm.valueChanges.subscribe(() => {\n      this.successMessage = '';\n    });\n  }\n  registerPatient() {\n    if (this.registrationForm.valid) {\n      const patientData = {\n        name: this.newPatient.name,\n        mobileNumber: this.newPatient.mobileNumber,\n        type: 'patient',\n        password: 'pwd'\n      };\n      this.usersService.createUser(patientData).subscribe(response => {\n        console.log('Patient registered successfully:', response);\n        this.successMessage = 'Patient registered successfully!';\n        this.registrationForm.reset(); // Optionally reset the form\n        this.router.navigate(['/patients']);\n      }, error => {\n        console.error('Error registering patient:', error);\n      });\n    }\n  }\n};\nPatientRegistrationComponent = __decorate([Component({\n  selector: 'app-patient-registration',\n  templateUrl: './patient-registration.component.html',\n  styleUrls: ['./patient-registration.component.css']\n})], PatientRegistrationComponent);\nexport { PatientRegistrationComponent };","map":{"version":3,"names":["Component","Validators","PatientRegistrationComponent","constructor","usersService","http","router","fb","successMessage","newPatient","name","mobileNumber","registrationForm","group","required","minLength","pattern","ngOnInit","valueChanges","subscribe","registerPatient","valid","patientData","type","password","createUser","response","console","log","reset","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\patient-registration\\patient-registration.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { UsersService } from 'src/services/users/users.service';\r\n\r\n@Component({\r\n  selector: 'app-patient-registration',\r\n  templateUrl: './patient-registration.component.html',\r\n  styleUrls: ['./patient-registration.component.css']\r\n})\r\nexport class PatientRegistrationComponent  implements OnInit{\r\n  registrationForm: FormGroup;\r\n  successMessage: string = '';\r\n  newPatient: any = {\r\n    name: '',\r\n    mobileNumber: ''\r\n  };\r\n\r\n  constructor(private usersService: UsersService,private http: HttpClient, private router: Router, private fb:FormBuilder) {\r\n    this.registrationForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(2)]],\r\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\r\n    });\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    // Clear the success message when the form values change\r\n    this.registrationForm.valueChanges.subscribe(() => {\r\n      this.successMessage = '';\r\n    });\r\n  }\r\n\r\n  registerPatient(): void {\r\n    if (this.registrationForm.valid) {\r\n    const patientData = {\r\n      name: this.newPatient.name,\r\n      mobileNumber: this.newPatient.mobileNumber,\r\n      type: 'patient',\r\n      password: 'pwd'\r\n    };\r\n\r\n    this.usersService.createUser(patientData).subscribe(\r\n      (response: any) => {\r\n        console.log('Patient registered successfully:', response);\r\n        this.successMessage = 'Patient registered successfully!';\r\n          this.registrationForm.reset(); // Optionally reset the form\r\n        this.router.navigate(['/patients']);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error registering patient:', error);\r\n      }\r\n    );\r\n  }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAQvCC,YAAoBC,YAA0B,EAASC,IAAgB,EAAUC,MAAc,EAAUC,EAAc;IAAnG,KAAAH,YAAY,GAAZA,YAAY;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,EAAE,GAAFA,EAAE;IAN3G,KAAAC,cAAc,GAAW,EAAE;IAC3B,KAAAC,UAAU,GAAQ;MAChBC,IAAI,EAAE,EAAE;MACRC,YAAY,EAAE;KACf;IAGC,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MACpCH,IAAI,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1DJ,YAAY,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,OAAO,CAAC,aAAa,CAAC,CAAC;KAC5E,CAAC;EAEJ;EACAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACL,gBAAgB,CAACM,YAAY,CAACC,SAAS,CAAC,MAAK;MAChD,IAAI,CAACX,cAAc,GAAG,EAAE;IAC1B,CAAC,CAAC;EACJ;EAEAY,eAAeA,CAAA;IACb,IAAI,IAAI,CAACR,gBAAgB,CAACS,KAAK,EAAE;MACjC,MAAMC,WAAW,GAAG;QAClBZ,IAAI,EAAE,IAAI,CAACD,UAAU,CAACC,IAAI;QAC1BC,YAAY,EAAE,IAAI,CAACF,UAAU,CAACE,YAAY;QAC1CY,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE;OACX;MAED,IAAI,CAACpB,YAAY,CAACqB,UAAU,CAACH,WAAW,CAAC,CAACH,SAAS,CAChDO,QAAa,IAAI;QAChBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;QACzD,IAAI,CAAClB,cAAc,GAAG,kCAAkC;QACtD,IAAI,CAACI,gBAAgB,CAACiB,KAAK,EAAE,CAAC,CAAC;QACjC,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,EACAC,KAAU,IAAI;QACbJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CACF;IACH;EACA;CACD;AA5CY7B,4BAA4B,GAAA8B,UAAA,EALxChC,SAAS,CAAC;EACTiC,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,C,EACWjC,4BAA4B,CA4CxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}