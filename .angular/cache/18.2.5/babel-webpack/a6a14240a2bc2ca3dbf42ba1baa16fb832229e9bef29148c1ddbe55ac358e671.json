{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { VisitsComponent } from './visits/visits.component';\nimport { VisitDetailsComponent } from './visit-details/visit-details.component';\nimport { PatientComponent } from './patient/patient.component';\nimport { PatientRegistrationComponent } from './patient-registration/patient-registration.component';\nimport { AddVisitComponent } from './add-visit/add-visit.component';\nimport { AuthGuard } from './auth.guard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [{\n  path: 'login',\n  component: LoginComponent\n},\n// { path: 'protected', component: , canActivate: [AuthGuard] },\n{\n  path: 'visits',\n  component: VisitsComponent,\n  canActivate: [AuthGuard]\n}, {\n  path: 'visit-details/:id',\n  component: VisitDetailsComponent,\n  canActivate: [AuthGuard]\n}, {\n  path: 'patient',\n  component: PatientComponent,\n  canActivate: [AuthGuard]\n}, {\n  path: 'register-patient',\n  component: PatientRegistrationComponent,\n  canActivate: [AuthGuard]\n}, {\n  path: 'add-visit/:id',\n  component: AddVisitComponent,\n  canActivate: [AuthGuard]\n}, {\n  path: '',\n  redirectTo: '/patients',\n  pathMatch: 'full'\n}, {\n  path: '**',\n  redirectTo: '/patients'\n}];\nexport class AppRoutingModule {\n  static {\n    this.ɵfac = function AppRoutingModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AppRoutingModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppRoutingModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [RouterModule.forRoot(routes), RouterModule]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppRoutingModule, {\n    imports: [i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","LoginComponent","VisitsComponent","VisitDetailsComponent","PatientComponent","PatientRegistrationComponent","AddVisitComponent","AuthGuard","routes","path","component","canActivate","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","i1","exports"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\app-routing.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { VisitsComponent } from './visits/visits.component';\r\nimport { VisitDetailsComponent } from './visit-details/visit-details.component';\r\nimport { PatientComponent } from './patient/patient.component';\r\nimport { PatientRegistrationComponent } from './patient-registration/patient-registration.component';\r\nimport { AddVisitComponent } from './add-visit/add-visit.component';\r\nimport { AuthGuard } from './auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {path:'login', component:LoginComponent },\r\n  // { path: 'protected', component: , canActivate: [AuthGuard] },\r\n  {path:'visits', component:VisitsComponent,  canActivate: [AuthGuard]},\r\n  { path: 'visit-details/:id', component: VisitDetailsComponent, canActivate: [AuthGuard] },\r\n  { path: 'patient', component: PatientComponent,  canActivate: [AuthGuard] },\r\n  { path: 'register-patient', component: PatientRegistrationComponent, canActivate: [AuthGuard] },\r\n  { path: 'add-visit/:id', component: AddVisitComponent,  canActivate: [AuthGuard] },\r\n  { path: '', redirectTo: '/patients', pathMatch: 'full' },\r\n  { path: '**', redirectTo: '/patients' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n\r\n }\r\n"],"mappings":"AACA,SAASA,YAAY,QAAgB,iBAAiB;AACtD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,qBAAqB,QAAQ,yCAAyC;AAC/E,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,4BAA4B,QAAQ,uDAAuD;AACpG,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,SAAS,QAAQ,cAAc;;;AAExC,MAAMC,MAAM,GAAW,CACrB;EAACC,IAAI,EAAC,OAAO;EAAEC,SAAS,EAACT;AAAc,CAAE;AACzC;AACA;EAACQ,IAAI,EAAC,QAAQ;EAAEC,SAAS,EAACR,eAAe;EAAGS,WAAW,EAAE,CAACJ,SAAS;AAAC,CAAC,EACrE;EAAEE,IAAI,EAAE,mBAAmB;EAAEC,SAAS,EAAEP,qBAAqB;EAAEQ,WAAW,EAAE,CAACJ,SAAS;AAAC,CAAE,EACzF;EAAEE,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAEN,gBAAgB;EAAGO,WAAW,EAAE,CAACJ,SAAS;AAAC,CAAE,EAC3E;EAAEE,IAAI,EAAE,kBAAkB;EAAEC,SAAS,EAAEL,4BAA4B;EAAEM,WAAW,EAAE,CAACJ,SAAS;AAAC,CAAE,EAC/F;EAAEE,IAAI,EAAE,eAAe;EAAEC,SAAS,EAAEJ,iBAAiB;EAAGK,WAAW,EAAE,CAACJ,SAAS;AAAC,CAAE,EAClF;EAAEE,IAAI,EAAE,EAAE;EAAEG,UAAU,EAAE,WAAW;EAAEC,SAAS,EAAE;AAAM,CAAE,EACxD;EAAEJ,IAAI,EAAE,IAAI;EAAEG,UAAU,EAAE;AAAW,CAAE,CACxC;AAMD,OAAM,MAAOE,gBAAgB;;;uCAAhBA,gBAAgB;IAAA;EAAA;;;YAAhBA;IAAgB;EAAA;;;gBAHjBd,YAAY,CAACe,OAAO,CAACP,MAAM,CAAC,EAC5BR,YAAY;IAAA;EAAA;;;2EAEXc,gBAAgB;IAAAE,OAAA,GAAAC,EAAA,CAAAjB,YAAA;IAAAkB,OAAA,GAFjBlB,YAAY;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}