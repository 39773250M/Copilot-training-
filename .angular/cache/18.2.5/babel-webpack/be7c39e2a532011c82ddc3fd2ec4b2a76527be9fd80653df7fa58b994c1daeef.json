{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class PatientRegistrationComponent {\n  constructor(http, router, fb) {\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.newPatient = {\n      name: '',\n      mobileNumber: ''\n    };\n    this.registrationForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\n    });\n  }\n  ngOnInit() {}\n  registerPatient() {\n    if (this.registrationForm.valid) {\n      const patientData = {\n        name: this.newPatient.name,\n        mobileNumber: this.newPatient.mobileNumber,\n        type: 'patient',\n        password: 'pwd'\n      };\n      this.http.post('/users', patientData).subscribe(response => {\n        console.log('Patient registered successfully:', response);\n        this.router.navigate(['/patients']);\n      }, error => {\n        console.error('Error registering patient:', error);\n      });\n    }\n  }\n  static {\n    this.ɵfac = function PatientRegistrationComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PatientRegistrationComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PatientRegistrationComponent,\n      selectors: [[\"app-patient-registration\"]],\n      decls: 18,\n      vars: 2,\n      consts: [[1, \"container\", \"mt-4\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\", \"mb-4\"], [1, \"card-body\"], [1, \"card-title\"], [3, \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"mobileNumber\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"mobileNumber\", \"name\", \"mobileNumber\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"]],\n      template: function PatientRegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\", 5);\n          i0.ɵɵtext(6, \"Register New Patient\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"form\", 6);\n          i0.ɵɵlistener(\"ngSubmit\", function PatientRegistrationComponent_Template_form_ngSubmit_7_listener() {\n            return ctx.registerPatient();\n          });\n          i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n          i0.ɵɵtext(10, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"input\", 9);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function PatientRegistrationComponent_Template_input_ngModelChange_11_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.newPatient.name, $event) || (ctx.newPatient.name = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 7)(13, \"label\", 10);\n          i0.ɵɵtext(14, \"Mobile Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"input\", 11);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function PatientRegistrationComponent_Template_input_ngModelChange_15_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.newPatient.mobileNumber, $event) || (ctx.newPatient.mobileNumber = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"button\", 12);\n          i0.ɵɵtext(17, \"Register\");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(11);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newPatient.name);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newPatient.mobileNumber);\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","PatientRegistrationComponent","constructor","http","router","fb","newPatient","name","mobileNumber","registrationForm","group","required","minLength","pattern","ngOnInit","registerPatient","valid","patientData","type","password","post","subscribe","response","console","log","navigate","error","i0","ɵɵdirectiveInject","i1","HttpClient","i2","Router","i3","FormBuilder","selectors","decls","vars","consts","template","PatientRegistrationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientRegistrationComponent_Template_form_ngSubmit_7_listener","ɵɵtwoWayListener","PatientRegistrationComponent_Template_input_ngModelChange_11_listener","$event","ɵɵtwoWayBindingSet","PatientRegistrationComponent_Template_input_ngModelChange_15_listener","ɵɵadvance","ɵɵtwoWayProperty"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\patient-registration\\patient-registration.component.ts","E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\patient-registration\\patient-registration.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-patient-registration',\r\n  templateUrl: './patient-registration.component.html',\r\n  styleUrls: ['./patient-registration.component.css']\r\n})\r\nexport class PatientRegistrationComponent  implements OnInit{\r\n  registrationForm: FormGroup;\r\n  newPatient: any = {\r\n    name: '',\r\n    mobileNumber: ''\r\n  };\r\n\r\n  constructor(private http: HttpClient, private router: Router, private fb:FormBuilder) {\r\n    this.registrationForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(2)]],\r\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]\r\n    });\r\n\r\n  }\r\n  ngOnInit(): void {}\r\n\r\n  registerPatient(): void {\r\n    if (this.registrationForm.valid) {\r\n    const patientData = {\r\n      name: this.newPatient.name,\r\n      mobileNumber: this.newPatient.mobileNumber,\r\n      type: 'patient',\r\n      password: 'pwd'\r\n    };\r\n\r\n    this.http.post('/users', patientData).subscribe(\r\n      (response: any) => {\r\n        console.log('Patient registered successfully:', response);\r\n        this.router.navigate(['/patients']);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error registering patient:', error);\r\n      }\r\n    );\r\n  }\r\n  }\r\n}\r\n","<div class=\"container mt-4\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-body\">\r\n            <h2 class=\"card-title\">Register New Patient</h2>\r\n            <form (ngSubmit)=\"registerPatient()\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"name\" class=\"form-label\">Name</label>\r\n                <input type=\"text\" id=\"name\" class=\"form-control\" [(ngModel)]=\"newPatient.name\" name=\"name\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"mobileNumber\" class=\"form-label\">Mobile Number</label>\r\n                <input type=\"text\" id=\"mobileNumber\" class=\"form-control\" [(ngModel)]=\"newPatient.mobileNumber\" name=\"mobileNumber\" required>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-success\">Register</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}