{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.loggedIn = false; // Add this line\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  login(username, password) {\n    return this.http.get(`${this.apiUrl}?username=${username}`).pipe(map(users => {\n      for (let user of users) {\n        //console.log('Login successful 00', users);\n        if (user.username === username && user.password === password) {\n          console.log('Login successful 11');\n          this.loggedIn = true;\n          this.currentUser = user;\n          return user;\n        }\n      }\n    }));\n  }\n  getCurrentUser() {\n    return of(this.currentUser);\n  }\n  isLoggedIn() {\n    return this.loggedIn;\n  }\n  logout() {\n    // Implement your logout logic here\n    this.loggedIn = false;\n    this.currentUser = null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","map","AuthService","constructor","http","loggedIn","apiUrl","login","username","password","get","pipe","users","user","console","log","currentUser","getCurrentUser","isLoggedIn","logout","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private loggedIn = false; // Add this line\r\n  private currentUser: any;\r\n  private apiUrl = 'http://localhost:3000/users';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}?username=${username}`).pipe(\r\n      map((users: any[]) => {\r\n        for (let user of users) {\r\n        //console.log('Login successful 00', users);\r\n        if (user.username === username && user.password === password) {\r\n          console.log('Login successful 11');\r\n          this.loggedIn = true;\r\n          this.currentUser = user;\r\n          return user;\r\n        } \r\n      }\r\n      })\r\n    );\r\n  }\r\n\r\n  getCurrentUser(): Observable<any> {\r\n    return of(this.currentUser);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.loggedIn;\r\n  }\r\n\r\n  logout(): void {\r\n    // Implement your logout logic here\r\n    this.loggedIn = false;\r\n    this.currentUser = null;\r\n  }\r\n}"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;IAElB,KAAAC,MAAM,GAAG,6BAA6B;EAEN;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACJ,MAAM,aAAaE,QAAQ,EAAE,CAAC,CAACG,IAAI,CACnEV,GAAG,CAAEW,KAAY,IAAI;MACnB,KAAK,IAAIC,IAAI,IAAID,KAAK,EAAE;QACxB;QACA,IAAIC,IAAI,CAACL,QAAQ,KAAKA,QAAQ,IAAIK,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,EAAE;UAC5DK,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;UAClC,IAAI,CAACV,QAAQ,GAAG,IAAI;UACpB,IAAI,CAACW,WAAW,GAAGH,IAAI;UACvB,OAAOA,IAAI;QACb;MACF;IACA,CAAC,CAAC,CACH;EACH;EAEAI,cAAcA,CAAA;IACZ,OAAOjB,EAAE,CAAC,IAAI,CAACgB,WAAW,CAAC;EAC7B;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACb,QAAQ;EACtB;EAEAc,MAAMA,CAAA;IACJ;IACA,IAAI,CAACd,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACW,WAAW,GAAG,IAAI;EACzB;;;uCAnCWd,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXrB,WAAW;MAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}