{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth/auth.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nexport class LoginComponent {\n  constructor(authService, fb, router) {\n    this.authService = authService;\n    this.fb = fb;\n    this.router = router;\n    this.errorMessage = '';\n    this.loginSuccess = '';\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    // Add your initialization logic here\n  }\n  onSubmit() {\n    const username = this.loginForm.get('username')?.value;\n    const password = this.loginForm.get('password')?.value;\n    console.log('Login check', username + ' pwd:' + password);\n    this.authService.login(username, password).subscribe(user => {\n      if (user && user.password === password) {\n        // Handle successful login\n        console.log('Login successful');\n        this.loginSuccess = 'Login successful';\n        if (user.role === 'receptionist') {\n          this.router.navigate(['/patient']);\n        } else {\n          this.router.navigate(['/visits']);\n        }\n      } else {\n        this.errorMessage = 'Invalid username/password';\n        console.log('Invalid username/password');\n      }\n    }, error => {\n      this.errorMessage = 'An error occurred';\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 17,\n      vars: 4,\n      consts: [[1, \"container\"], [\"placeholder\", \"Enter mobile number\", 3, \"ngModelChange\", \"ngModel\"], [3, \"ngSubmit\", \"formGroup\"], [\"class\", \"alert alert-sucess\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [\"for\", \"username\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"alert\", \"alert-sucess\"], [1, \"alert\", \"alert-danger\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"input\", 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_3_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.mobileNumber, $event) || (ctx.mobileNumber = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 2, 1, \"div\", 3)(6, LoginComponent_div_6_Template, 2, 1, \"div\", 4);\n          i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"Username:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 8);\n          i0.ɵɵtext(13, \"Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"button\", 10);\n          i0.ɵɵtext(16, \"Submit\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.mobileNumber);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.FormGroupDirective, i2.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","errorMessage","LoginComponent","constructor","authService","fb","router","loginSuccess","loginForm","group","username","required","password","ngOnInit","onSubmit","get","value","console","log","login","subscribe","user","role","navigate","error","ɵɵdirectiveInject","i1","AuthService","i2","FormBuilder","i3","Router","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵtwoWayListener","LoginComponent_Template_input_ngModelChange_3_listener","$event","ɵɵtwoWayBindingSet","mobileNumber","ɵɵlistener","LoginComponent_Template_form_ngSubmit_4_listener","ɵɵtemplate","LoginComponent_div_5_Template","LoginComponent_div_6_Template","ɵɵelement","ɵɵtwoWayProperty","ɵɵproperty"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\login\\login.component.ts","E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../services/auth/auth.service'; // Import the AuthService\r\nimport { Inject } from '@angular/core';\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n  })\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  errorMessage: string = '';\r\n  loginSuccess: string = '';\r\n\r\n  constructor( private authService: AuthService, private fb: FormBuilder, private router: Router) {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    // Add your initialization logic here\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const username = this.loginForm.get('username')?.value;\r\n    const password = this.loginForm.get('password')?.value;\r\n\r\n    console.log('Login check', username + ' pwd:' + password);\r\n\r\n    this.authService.login(username, password).subscribe(\r\n      (user) => {\r\n        if (user && user.password === password) {\r\n          // Handle successful login\r\n          console.log('Login successful');\r\n          this.loginSuccess = 'Login successful';\r\n          if (user.role === 'receptionist') {\r\n            this.router.navigate(['/patient']);\r\n          } else {\r\n          this.router.navigate(['/visits']);\r\n          }\r\n        } else {\r\n          this.errorMessage = 'Invalid username/password';\r\n          console.log('Invalid username/password');\r\n        }\r\n      },\r\n      (error: any) => { // Explicitly type 'error' as 'any'\r\n        this.errorMessage = 'An error occurred';\r\n      }\r\n    );\r\n  }\r\n}\r\n//if user type is receptionist, navigate to patient page\" and press enter   \r\n \r\n// import { Component, OnInit } from '@angular/core';\r\n\r\n// @Component({\r\n//   selector: 'app-login',\r\n//   templateUrl: './login.component.html',\r\n//   styleUrls: ['./login.component.scss']\r\n// })\r\n// export class LoginComponent implements OnInit {\r\n\r\n//   constructor() { }\r\n\r\n//   ngOnInit(): void {\r\n//   }\r\n\r\n// }\r\n","\r\n  \r\n  <div class=\"container\">\r\n  <h2>Login</h2>\r\n  <input [(ngModel)]=\"mobileNumber\" placeholder=\"Enter mobile number\" />\r\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div *ngIf=\"errorMessage\" class=\"alert alert-sucess\">{{errorMessage}}</div>\r\n    <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{errorMessage}}</div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"username\" class=\"form-label\">Username:</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"username\" formControlName=\"username\" required>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"password\" class=\"form-label\">Password:</label>\r\n      <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" required>\r\n    </div>\r\n    \r\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}