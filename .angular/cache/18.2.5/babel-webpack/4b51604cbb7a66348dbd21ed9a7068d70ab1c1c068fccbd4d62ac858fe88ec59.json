{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AddVisitComponent = class AddVisitComponent {\n  constructor(fb, route, visitService, router, patientService, authService) {\n    this.fb = fb;\n    this.route = route;\n    this.visitService = visitService;\n    this.router = router;\n    this.patientService = patientService;\n    this.authService = authService;\n    this.patientId = 1;\n    this.visitForm = this.fb.group({\n      consultation: ['', Validators.required],\n      symptoms: ['', Validators.required],\n      treatment: ['', Validators.required],\n      advice: ['', Validators.required],\n      prescriptions: this.fb.array([this.createPrescription()])\n    });\n    this.patientId = +this.route.snapshot.paramMap.get('id');\n  }\n  ngOnInit() {\n    this.patientId = +this.route.snapshot.paramMap.get('id');\n    this.getPatientDetails();\n  }\n  get prescriptions() {\n    return this.visitForm.get('prescriptions');\n  }\n  getPatientDetails() {\n    this.patientService.getPatient(this.patientId).subscribe(patient => {\n      this.patientDetails = patient;\n      console.log('Patient details:', patient);\n    }, error => {\n      console.error('Error fetching patient details:', error);\n    });\n  }\n  // addVisit(): void {\n  //   if (this.visitForm.valid) {\n  //     const visitData = {\n  //       patientId: this.patientId,\n  //       consultation: this.visitForm.value.consultation,\n  //       treatment: this.visitForm.value.treatment,\n  //       prescription: this.visitForm.value.prescription\n  //     };\n  //     this.visitService.addVisit(visitData).subscribe(\n  //       (response: any) => {\n  //         console.log('Visit added successfully:', response);\n  //         this.router.navigate(['/patients']);\n  //       },\n  //       (error: any) => {\n  //         console.error('Error adding visit:', error);\n  //       }\n  //     );\n  //   }\n  // }\n  onSubmit() {\n    if (this.visitForm.valid) {\n      const visitData = {\n        ...this.visitForm.value,\n        patientId: this.patientId\n      };\n      this.visitService.addVisit(visitData).subscribe(response => {\n        console.log('Visit added successfully', response);\n        this.router.navigate(['/visits']);\n      }, error => {\n        console.error('Error adding visit', error);\n      });\n    }\n  }\n  createPrescription() {\n    return this.fb.group({\n      medicineName: ['', Validators.required],\n      dosage: this.fb.group({\n        morning: [false],\n        afternoon: [false],\n        evening: [false]\n      }),\n      afterMeals: [false],\n      duration: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n  addPrescription() {\n    this.prescriptions.push(this.createPrescription());\n  }\n  removePrescription(index) {\n    this.prescriptions.removeAt(index);\n  }\n  saveVisit() {\n    const visit = {\n      DoctorID: this.authService.getCurrentUser,\n      // Assuming AuthService has a method to get the logged-in user's ID\n      PatientID: this.patientId,\n      Date: new Date().toISOString().split('T')[0],\n      // Current date in YYYY-MM-DD format\n      Time: new Date().toTimeString().split(' ')[0].slice(0, 5),\n      // Current time in HH:MM format\n      Symptoms: this.visitForm.value.symptoms,\n      Treatment: this.visitForm.value.treatment,\n      Advice: this.visitForm.value.advice,\n      Prescriptions: this.visitForm.value.prescriptions\n    };\n    this.visitService.addVisit(visit).subscribe(response => {\n      console.log('Visit saved successfully', response);\n      this.router.navigate(['/visits']); // Navigate to the visits list or another appropriate page\n    }, error => {\n      console.error('Error saving visit', error);\n    });\n  }\n  toggleDosage(prescription, time) {\n    const control = prescription.get(`dosage.${time}`);\n    control.setValue(!control.value);\n  }\n  toggleMealTime(prescription, afterMeals) {\n    prescription.get('afterMeals').setValue(afterMeals);\n  }\n};\nAddVisitComponent = __decorate([Component({\n  selector: 'app-add-visit',\n  templateUrl: './add-visit.component.html',\n  styleUrls: ['./add-visit.component.css']\n})], AddVisitComponent);\nexport { AddVisitComponent };","map":{"version":3,"names":["Component","Validators","AddVisitComponent","constructor","fb","route","visitService","router","patientService","authService","patientId","visitForm","group","consultation","required","symptoms","treatment","advice","prescriptions","array","createPrescription","snapshot","paramMap","get","ngOnInit","getPatientDetails","getPatient","subscribe","patient","patientDetails","console","log","error","onSubmit","valid","visitData","value","addVisit","response","navigate","medicineName","dosage","morning","afternoon","evening","afterMeals","duration","min","addPrescription","push","removePrescription","index","removeAt","saveVisit","visit","DoctorID","getCurrentUser","PatientID","Date","toISOString","split","Time","toTimeString","slice","Symptoms","Treatment","Advice","Prescriptions","toggleDosage","prescription","time","control","setValue","toggleMealTime","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\add-visit\\add-visit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { VisitsService } from './../../../src/services/visits/visits.service';\r\nimport { PatientsService } from './../../../src/services/patients/patients.service';\r\nimport { AuthService } from './../../../src/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-add-visit',\r\n  templateUrl: './add-visit.component.html',\r\n  styleUrls: ['./add-visit.component.css']\r\n})\r\nexport class AddVisitComponent implements OnInit {\r\n  visitForm: FormGroup;\r\n  patientId: number =1;\r\n  patientDetails: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private visitService: VisitsService,\r\n    private router: Router,\r\n    private patientService:PatientsService,\r\n    private authService: AuthService\r\n  ) {\r\n    this.visitForm = this.fb.group({\r\n      consultation: ['', Validators.required],\r\n      symptoms: ['', Validators.required],\r\n      treatment: ['', Validators.required],\r\n      advice: ['', Validators.required],\r\n      prescriptions: this.fb.array([this.createPrescription()])\r\n    });\r\n    this.patientId = +this.route.snapshot.paramMap.get('id')!;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.patientId = +this.route.snapshot.paramMap.get('id')!;\r\n    this.getPatientDetails();\r\n  }\r\n  get prescriptions(): FormArray {\r\n    return this.visitForm.get('prescriptions') as FormArray;\r\n  }\r\n\r\n  getPatientDetails(): void {\r\n    this.patientService.getPatient(this.patientId).subscribe(\r\n      (patient: any) => {\r\n        this.patientDetails = patient;\r\n        console.log('Patient details:', patient);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error fetching patient details:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // addVisit(): void {\r\n  //   if (this.visitForm.valid) {\r\n  //     const visitData = {\r\n  //       patientId: this.patientId,\r\n  //       consultation: this.visitForm.value.consultation,\r\n  //       treatment: this.visitForm.value.treatment,\r\n  //       prescription: this.visitForm.value.prescription\r\n  //     };\r\n\r\n  //     this.visitService.addVisit(visitData).subscribe(\r\n  //       (response: any) => {\r\n  //         console.log('Visit added successfully:', response);\r\n  //         this.router.navigate(['/patients']);\r\n  //       },\r\n  //       (error: any) => {\r\n  //         console.error('Error adding visit:', error);\r\n  //       }\r\n  //     );\r\n  //   }\r\n  // }\r\n  onSubmit(): void {\r\n    if (this.visitForm.valid) {\r\n      const visitData = {\r\n        ...this.visitForm.value,\r\n        patientId: this.patientId\r\n      };\r\n      this.visitService.addVisit(visitData).subscribe(\r\n        response => {\r\n          console.log('Visit added successfully', response);\r\n          this.router.navigate(['/visits']);\r\n        },\r\n        error => {\r\n          console.error('Error adding visit', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  createPrescription(): FormGroup {\r\n    return this.fb.group({\r\n      medicineName: ['', Validators.required],\r\n      dosage: this.fb.group({\r\n        morning: [false],\r\n        afternoon: [false],\r\n        evening: [false]\r\n      }),\r\n      afterMeals: [false],\r\n      duration: ['', [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n\r\n  addPrescription(): void {\r\n    this.prescriptions.push(this.createPrescription());\r\n  }\r\n\r\n  removePrescription(index: number): void {\r\n    this.prescriptions.removeAt(index);\r\n  }\r\n\r\n  saveVisit(): void {\r\n    const visit = {\r\n      DoctorID: this.authService.getCurrentUser, // Assuming AuthService has a method to get the logged-in user's ID\r\n      PatientID: this.patientId,\r\n      Date: new Date().toISOString().split('T')[0], // Current date in YYYY-MM-DD format\r\n      Time: new Date().toTimeString().split(' ')[0].slice(0, 5), // Current time in HH:MM format\r\n      Symptoms: this.visitForm.value.symptoms,\r\n      Treatment: this.visitForm.value.treatment,\r\n      Advice: this.visitForm.value.advice,\r\n      Prescriptions: this.visitForm.value.prescriptions\r\n    };\r\n\r\n    this.visitService.addVisit(visit).subscribe(\r\n      (response) => {\r\n        console.log('Visit saved successfully', response);\r\n        this.router.navigate(['/visits']); // Navigate to the visits list or another appropriate page\r\n      },\r\n      (error) => {\r\n        console.error('Error saving visit', error);\r\n      }\r\n    );\r\n  }\r\n  toggleDosage(prescription: FormGroup, time: string): void {\r\n    const control = prescription.get(`dosage.${time}`);\r\n    control.setValue(!control.value);\r\n  }\r\n\r\n  toggleMealTime(prescription: FormGroup, afterMeals: boolean): void {\r\n    prescription.get('afterMeals').setValue(afterMeals);\r\n  }\r\n\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}