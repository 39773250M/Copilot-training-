{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./../../../src/services/visits/visits.service\";\nimport * as i4 from \"./../../../src/services/patients/patients.service\";\nimport * as i5 from \"./../../../src/services/auth/auth.service\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = (a0, a1) => ({\n  \"btn-primary\": a0,\n  \"btn-outline-primary\": a1\n});\nfunction AddVisitComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Symptoms are required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddVisitComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Treatment is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddVisitComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Advice is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddVisitComponent_div_20_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Medicine name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddVisitComponent_div_20_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Duration is required and must be at least 1 day. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddVisitComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"label\", 16);\n    i0.ɵɵtext(5, \"Medicine Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 17);\n    i0.ɵɵtemplate(7, AddVisitComponent_div_20_div_7_Template, 2, 0, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\")(9, \"label\");\n    i0.ɵɵtext(10, \"Dosage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 18)(12, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_12_listener() {\n      const prescription_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleDosage(prescription_r2, \"morning\"));\n    });\n    i0.ɵɵtext(13, \"Morning\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_14_listener() {\n      const prescription_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleDosage(prescription_r2, \"afternoon\"));\n    });\n    i0.ɵɵtext(15, \"Afternoon\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_16_listener() {\n      const prescription_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleDosage(prescription_r2, \"evening\"));\n    });\n    i0.ɵɵtext(17, \"Evening\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\")(19, \"label\");\n    i0.ɵɵtext(20, \"Time of Dosage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 18)(22, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_22_listener() {\n      const prescription_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleMealTime(prescription_r2, false));\n    });\n    i0.ɵɵtext(23, \"Before Meals\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_24_listener() {\n      const prescription_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleMealTime(prescription_r2, true));\n    });\n    i0.ɵɵtext(25, \"After Meals\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"div\")(27, \"label\", 20);\n    i0.ɵɵtext(28, \"Duration (Days)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(29, \"input\", 21);\n    i0.ɵɵtemplate(30, AddVisitComponent_div_20_div_30_Template, 2, 0, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddVisitComponent_div_20_Template_button_click_31_listener() {\n      const i_r4 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removePrescription(i_r4));\n    });\n    i0.ɵɵtext(32, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    let tmp_5_0;\n    let tmp_6_0;\n    let tmp_7_0;\n    let tmp_8_0;\n    let tmp_11_0;\n    const prescription_r2 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Prescription \", i_r4 + 1, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = prescription_r2.get(\"medicineName\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = prescription_r2.get(\"medicineName\")) == null ? null : tmp_5_0.touched));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(9, _c0, (tmp_6_0 = prescription_r2.get(\"dosage.morning\")) == null ? null : tmp_6_0.value, !prescription_r2.get(\"dosage.morning\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c0, (tmp_7_0 = prescription_r2.get(\"dosage.afternoon\")) == null ? null : tmp_7_0.value, !prescription_r2.get(\"dosage.afternoon\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(15, _c0, (tmp_8_0 = prescription_r2.get(\"dosage.evening\")) == null ? null : tmp_8_0.value, !prescription_r2.get(\"dosage.evening\").value));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(18, _c0, !prescription_r2.get(\"afterMeals\").value, prescription_r2.get(\"afterMeals\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(21, _c0, prescription_r2.get(\"afterMeals\").value, !prescription_r2.get(\"afterMeals\").value));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_11_0 = prescription_r2.get(\"duration\")) == null ? null : tmp_11_0.invalid) && ((tmp_11_0 = prescription_r2.get(\"duration\")) == null ? null : tmp_11_0.touched));\n  }\n}\nexport class AddVisitComponent {\n  constructor(fb, route, visitService, router, patientService, authService) {\n    this.fb = fb;\n    this.route = route;\n    this.visitService = visitService;\n    this.router = router;\n    this.patientService = patientService;\n    this.authService = authService;\n    this.patientId = 1;\n    this.visitForm = this.fb.group({\n      consultation: ['', Validators.required],\n      symptoms: ['', Validators.required],\n      treatment: ['', Validators.required],\n      advice: ['', Validators.required],\n      prescriptions: this.fb.array([this.createPrescription()])\n    });\n    this.patientId = +this.route.snapshot.paramMap.get('id');\n  }\n  ngOnInit() {\n    this.patientId = +this.route.snapshot.paramMap.get('id');\n    this.getPatientDetails();\n  }\n  get prescriptions() {\n    return this.visitForm.get('prescriptions');\n  }\n  getPatientDetails() {\n    this.patientService.getPatient(this.patientId).subscribe(patient => {\n      this.patientDetails = patient;\n      console.log('Patient details:', patient);\n    }, error => {\n      console.error('Error fetching patient details:', error);\n    });\n  }\n  // addVisit(): void {\n  //   if (this.visitForm.valid) {\n  //     const visitData = {\n  //       patientId: this.patientId,\n  //       consultation: this.visitForm.value.consultation,\n  //       treatment: this.visitForm.value.treatment,\n  //       prescription: this.visitForm.value.prescription\n  //     };\n  //     this.visitService.addVisit(visitData).subscribe(\n  //       (response: any) => {\n  //         console.log('Visit added successfully:', response);\n  //         this.router.navigate(['/patients']);\n  //       },\n  //       (error: any) => {\n  //         console.error('Error adding visit:', error);\n  //       }\n  //     );\n  //   }\n  // }\n  onSubmit() {\n    if (this.visitForm.valid) {\n      const visitData = {\n        ...this.visitForm.value,\n        patientId: this.patientId\n      };\n      this.visitService.addVisit(visitData).subscribe(response => {\n        console.log('Visit added successfully', response);\n        this.router.navigate(['/visits']);\n      }, error => {\n        console.error('Error adding visit', error);\n      });\n    }\n  }\n  createPrescription() {\n    return this.fb.group({\n      medicineName: ['', Validators.required],\n      dosage: this.fb.group({\n        morning: [false],\n        afternoon: [false],\n        evening: [false]\n      }),\n      afterMeals: [false],\n      duration: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n  addPrescription() {\n    this.prescriptions.push(this.createPrescription());\n  }\n  removePrescription(index) {\n    this.prescriptions.removeAt(index);\n  }\n  saveVisit() {\n    const visit = {\n      DoctorID: this.authService.getCurrentUser,\n      // Assuming AuthService has a method to get the logged-in user's ID\n      PatientID: this.patientId,\n      Date: new Date().toISOString().split('T')[0],\n      // Current date in YYYY-MM-DD format\n      Time: new Date().toTimeString().split(' ')[0].slice(0, 5),\n      // Current time in HH:MM format\n      Symptoms: this.visitForm.value.symptoms,\n      Treatment: this.visitForm.value.treatment,\n      Advice: this.visitForm.value.advice,\n      Prescriptions: this.visitForm.value.prescriptions\n    };\n    this.visitService.addVisit(visit).subscribe(response => {\n      console.log('Visit saved successfully', response);\n      this.router.navigate(['/visits']); // Navigate to the visits list or another appropriate page\n    }, error => {\n      console.error('Error saving visit', error);\n    });\n  }\n  toggleDosage(prescription, time) {\n    const control = prescription.get(`dosage.${time}`);\n    control.setValue(!control.value);\n  }\n  toggleMealTime(prescription, afterMeals) {\n    prescription.get('afterMeals').setValue(afterMeals);\n  }\n  static {\n    this.ɵfac = function AddVisitComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AddVisitComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.VisitsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i4.PatientsService), i0.ɵɵdirectiveInject(i5.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddVisitComponent,\n      selectors: [[\"app-add-visit\"]],\n      decls: 25,\n      vars: 5,\n      consts: [[3, \"ngSubmit\", \"formGroup\"], [1, \"grid-container\"], [1, \"grid-item\"], [\"for\", \"symptoms\"], [\"id\", \"symptoms\", \"formControlName\", \"symptoms\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"treatment\"], [\"id\", \"treatment\", \"formControlName\", \"treatment\"], [\"for\", \"advice\"], [\"id\", \"advice\", \"formControlName\", \"advice\"], [\"formArrayName\", \"prescriptions\"], [\"class\", \"prescription-item\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"], [1, \"error\"], [1, \"prescription-item\", 3, \"formGroupName\"], [\"for\", \"medicineName\"], [\"id\", \"medicineName\", \"formControlName\", \"medicineName\"], [\"role\", \"group\", 1, \"btn-group\"], [\"type\", \"button\", 1, \"btn\", 3, \"click\", \"ngClass\"], [\"for\", \"duration\"], [\"id\", \"duration\", \"type\", \"number\", \"formControlName\", \"duration\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n      template: function AddVisitComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Patient Consultation and Treatment Details\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function AddVisitComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Symptoms\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵtemplate(8, AddVisitComponent_div_8_Template, 2, 0, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Treatment\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵtemplate(13, AddVisitComponent_div_13_Template, 2, 0, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 8);\n          i0.ɵɵtext(16, \"Advice\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 9);\n          i0.ɵɵtemplate(18, AddVisitComponent_div_18_Template, 2, 0, \"div\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 10);\n          i0.ɵɵtemplate(20, AddVisitComponent_div_20_Template, 33, 24, \"div\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function AddVisitComponent_Template_button_click_21_listener() {\n            return ctx.addPrescription();\n          });\n          i0.ɵɵtext(22, \"Add Prescription\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 13);\n          i0.ɵɵtext(24, \"Save\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.visitForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.visitForm.get(\"symptoms\").invalid && ctx.visitForm.get(\"symptoms\").touched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.visitForm.get(\"treatment\").invalid && ctx.visitForm.get(\"treatment\").touched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.visitForm.get(\"advice\").invalid && ctx.visitForm.get(\"advice\").touched);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.prescriptions.controls);\n        }\n      },\n      dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n      styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\", \".grid-container[_ngcontent-%COMP%] {\\n      display: grid;\\n      grid-template-columns: repeat(2, 1fr);\\n      gap: 20px;\\n    }\\n  \\n    .grid-item[_ngcontent-%COMP%] {\\n      display: flex;\\n      flex-direction: column;\\n    }\\n  \\n    .prescription-item[_ngcontent-%COMP%] {\\n      margin-bottom: 20px;\\n      padding: 10px;\\n      border: 1px solid #ccc;\\n      border-radius: 5px;\\n    }\\n  \\n    .error[_ngcontent-%COMP%] {\\n      color: red;\\n      font-size: 0.8em;\\n    }\\n  \\n    .btn-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\n      margin-right: 5px;\\n    }\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵtemplate","AddVisitComponent_div_20_div_7_Template","ɵɵlistener","AddVisitComponent_div_20_Template_button_click_12_listener","prescription_r2","ɵɵrestoreView","_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","toggleDosage","AddVisitComponent_div_20_Template_button_click_14_listener","AddVisitComponent_div_20_Template_button_click_16_listener","AddVisitComponent_div_20_Template_button_click_22_listener","toggleMealTime","AddVisitComponent_div_20_Template_button_click_24_listener","AddVisitComponent_div_20_div_30_Template","AddVisitComponent_div_20_Template_button_click_31_listener","i_r4","index","removePrescription","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1","tmp_5_0","get","invalid","touched","ɵɵpureFunction2","_c0","tmp_6_0","value","tmp_7_0","tmp_8_0","tmp_11_0","AddVisitComponent","constructor","fb","route","visitService","router","patientService","authService","patientId","visitForm","group","consultation","required","symptoms","treatment","advice","prescriptions","array","createPrescription","snapshot","paramMap","ngOnInit","getPatientDetails","getPatient","subscribe","patient","patientDetails","console","log","error","onSubmit","valid","visitData","addVisit","response","navigate","medicineName","dosage","morning","afternoon","evening","afterMeals","duration","min","addPrescription","push","removeAt","saveVisit","visit","DoctorID","getCurrentUser","PatientID","Date","toISOString","split","Time","toTimeString","slice","Symptoms","Treatment","Advice","Prescriptions","prescription","time","control","setValue","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","i3","VisitsService","Router","i4","PatientsService","i5","AuthService","selectors","decls","vars","consts","template","AddVisitComponent_Template","rf","ctx","AddVisitComponent_Template_form_ngSubmit_2_listener","AddVisitComponent_div_8_Template","AddVisitComponent_div_13_Template","AddVisitComponent_div_18_Template","AddVisitComponent_div_20_Template","AddVisitComponent_Template_button_click_21_listener","controls"],"sources":["E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\add-visit\\add-visit.component.ts","E:\\Murugan\\copilot angular hospital\\Copilot-training\\src\\app\\add-visit\\add-visit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { VisitsService } from './../../../src/services/visits/visits.service';\r\nimport { PatientsService } from './../../../src/services/patients/patients.service';\r\nimport { AuthService } from './../../../src/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-add-visit',\r\n  templateUrl: './add-visit.component.html',\r\n  styleUrls: ['./add-visit.component.css']\r\n})\r\nexport class AddVisitComponent implements OnInit {\r\n  visitForm: FormGroup;\r\n  patientId: number =1;\r\n  patientDetails: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private visitService: VisitsService,\r\n    private router: Router,\r\n    private patientService:PatientsService,\r\n    private authService: AuthService\r\n  ) {\r\n    this.visitForm = this.fb.group({\r\n      consultation: ['', Validators.required],\r\n      symptoms: ['', Validators.required],\r\n      treatment: ['', Validators.required],\r\n      advice: ['', Validators.required],\r\n      prescriptions: this.fb.array([this.createPrescription()])\r\n    });\r\n    this.patientId = +this.route.snapshot.paramMap.get('id')!;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.patientId = +this.route.snapshot.paramMap.get('id')!;\r\n    this.getPatientDetails();\r\n  }\r\n  get prescriptions(): FormArray {\r\n    return this.visitForm.get('prescriptions') as FormArray;\r\n  }\r\n\r\n  getPatientDetails(): void {\r\n    this.patientService.getPatient(this.patientId).subscribe(\r\n      (patient: any) => {\r\n        this.patientDetails = patient;\r\n        console.log('Patient details:', patient);\r\n      },\r\n      (error: any) => {\r\n        console.error('Error fetching patient details:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // addVisit(): void {\r\n  //   if (this.visitForm.valid) {\r\n  //     const visitData = {\r\n  //       patientId: this.patientId,\r\n  //       consultation: this.visitForm.value.consultation,\r\n  //       treatment: this.visitForm.value.treatment,\r\n  //       prescription: this.visitForm.value.prescription\r\n  //     };\r\n\r\n  //     this.visitService.addVisit(visitData).subscribe(\r\n  //       (response: any) => {\r\n  //         console.log('Visit added successfully:', response);\r\n  //         this.router.navigate(['/patients']);\r\n  //       },\r\n  //       (error: any) => {\r\n  //         console.error('Error adding visit:', error);\r\n  //       }\r\n  //     );\r\n  //   }\r\n  // }\r\n  onSubmit(): void {\r\n    if (this.visitForm.valid) {\r\n      const visitData = {\r\n        ...this.visitForm.value,\r\n        patientId: this.patientId\r\n      };\r\n      this.visitService.addVisit(visitData).subscribe(\r\n        response => {\r\n          console.log('Visit added successfully', response);\r\n          this.router.navigate(['/visits']);\r\n        },\r\n        error => {\r\n          console.error('Error adding visit', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  createPrescription(): FormGroup {\r\n    return this.fb.group({\r\n      medicineName: ['', Validators.required],\r\n      dosage: this.fb.group({\r\n        morning: [false],\r\n        afternoon: [false],\r\n        evening: [false]\r\n      }),\r\n      afterMeals: [false],\r\n      duration: ['', [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n\r\n  addPrescription(): void {\r\n    this.prescriptions.push(this.createPrescription());\r\n  }\r\n\r\n  removePrescription(index: number): void {\r\n    this.prescriptions.removeAt(index);\r\n  }\r\n\r\n  saveVisit(): void {\r\n    const visit = {\r\n      DoctorID: this.authService.getCurrentUser, // Assuming AuthService has a method to get the logged-in user's ID\r\n      PatientID: this.patientId,\r\n      Date: new Date().toISOString().split('T')[0], // Current date in YYYY-MM-DD format\r\n      Time: new Date().toTimeString().split(' ')[0].slice(0, 5), // Current time in HH:MM format\r\n      Symptoms: this.visitForm.value.symptoms,\r\n      Treatment: this.visitForm.value.treatment,\r\n      Advice: this.visitForm.value.advice,\r\n      Prescriptions: this.visitForm.value.prescriptions\r\n    };\r\n\r\n    this.visitService.addVisit(visit).subscribe(\r\n      (response) => {\r\n        console.log('Visit saved successfully', response);\r\n        this.router.navigate(['/visits']); // Navigate to the visits list or another appropriate page\r\n      },\r\n      (error) => {\r\n        console.error('Error saving visit', error);\r\n      }\r\n    );\r\n  }\r\n  toggleDosage(prescription: FormGroup, time: string): void {\r\n    const control = prescription.get(`dosage.${time}`);\r\n    control.setValue(!control.value);\r\n  }\r\n\r\n  toggleMealTime(prescription: FormGroup, afterMeals: boolean): void {\r\n    prescription.get('afterMeals').setValue(afterMeals);\r\n  }\r\n\r\n\r\n}","<!-- <div class=\"container mt-4\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-body\">\r\n          <h2 class=\"card-title\">Add Visit</h2>\r\n          <form [formGroup]=\"visitForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"consultation\" class=\"form-label\">Consultation</label>\r\n              <textarea id=\"consultation\" class=\"form-control\" formControlName=\"consultation\" rows=\"3\"></textarea>\r\n              <div *ngIf=\"visitForm.get('consultation')?.invalid && visitForm.get('consultation')?.touched\" class=\"text-danger\">\r\n                Consultation is required.\r\n              </div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"symptoms\" class=\"form-label\">Symptoms</label>\r\n                <textarea id=\"symptoms\" class=\"form-control\" formControlName=\"symptoms\" rows=\"3\"></textarea>\r\n                <div *ngIf=\"visitForm.get('symptoms')?.invalid && visitForm.get('symptoms')?.touched\" class=\"text-danger\">\r\n                    Symptoms are required.\r\n                </div>\r\n              </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"treatment\" class=\"form-label\">Treatment</label>\r\n              <textarea id=\"treatment\" class=\"form-control\" formControlName=\"treatment\" rows=\"3\"></textarea>\r\n              <div *ngIf=\"visitForm.get('treatment')?.invalid && visitForm.get('treatment')?.touched\" class=\"text-danger\">\r\n                Treatment is required.\r\n              </div>\r\n            </div>\r\n            <div formArrayName=\"prescriptions\">\r\n                <div *ngFor=\"let prescription of prescriptions.controls; let i = index\" [formGroupName]=\"i\">\r\n                  <h4>Prescription {{ i + 1 }}</h4>\r\n                  <div>\r\n                    <label for=\"medicineName\">Medicine Name</label>\r\n                    <input id=\"medicineName\" formControlName=\"medicineName\" />\r\n                    <div *ngIf=\"prescription.get('medicineName')?.invalid && prescription.get('medicineName')?.touched\">\r\n                      Medicine name is required.\r\n                    </div>\r\n                  </div>\r\n            \r\n                  <div formGroupName=\"dosage\">\r\n                    <label>Dosage</label>\r\n                    <div>\r\n                      <label>\r\n                        <input type=\"checkbox\" formControlName=\"morning\" /> Morning\r\n                      </label>\r\n                      <label>\r\n                        <input type=\"checkbox\" formControlName=\"afternoon\" /> Afternoon\r\n                      </label>\r\n                      <label>\r\n                        <input type=\"checkbox\" formControlName=\"evening\" /> Evening\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n            \r\n                  <div>\r\n                    <label>\r\n                      <input type=\"checkbox\" formControlName=\"afterMeals\" /> After Meals\r\n                    </label>\r\n                  </div>\r\n            \r\n                  <div>\r\n                    <label for=\"duration\">Duration (days)</label>\r\n                    <input id=\"duration\" type=\"number\" formControlName=\"duration\" />\r\n                    <div *ngIf=\"prescription.get('duration')?.invalid && prescription.get('duration')?.touched\">\r\n                      Duration is required and must be at least 1 day.\r\n                    </div>\r\n                  </div>\r\n            \r\n                  <button type=\"button\" (click)=\"removePrescription(i)\">Remove Prescription</button>\r\n                </div>\r\n              </div>\r\n              <button type=\"button\" (click)=\"addPrescription()\">Add Prescription</button>\r\n           \r\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"visitForm.invalid\">Add Visit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> -->\r\n<h2>Patient Consultation and Treatment Details</h2>\r\n\r\n<!-- <div *ngIf=\"patientDetails\">\r\n    <h2>Patient Details</h2>\r\n    <p>Name: {{ patientDetails.name }}</p>\r\n    <p>Mobile Number: {{ patientDetails.mobileNumber }}</p>\r\n    <p>Condition: {{ patientDetails.condition }}</p>\r\n\r\n  </div> -->\r\n\r\n  <form [formGroup]=\"visitForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"grid-container\">\r\n      <div class=\"grid-item\">\r\n        <label for=\"symptoms\">Symptoms</label>\r\n        <input id=\"symptoms\" formControlName=\"symptoms\" />\r\n        <div *ngIf=\"visitForm.get('symptoms').invalid && visitForm.get('symptoms').touched\" class=\"error\">\r\n          Symptoms are required.\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"grid-item\">\r\n        <label for=\"treatment\">Treatment</label>\r\n        <input id=\"treatment\" formControlName=\"treatment\" />\r\n        <div *ngIf=\"visitForm.get('treatment').invalid && visitForm.get('treatment').touched\" class=\"error\">\r\n          Treatment is required.\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"grid-item\">\r\n        <label for=\"advice\">Advice</label>\r\n        <input id=\"advice\" formControlName=\"advice\" />\r\n        <div *ngIf=\"visitForm.get('advice').invalid && visitForm.get('advice').touched\" class=\"error\">\r\n          Advice is required.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n    <div formArrayName=\"prescriptions\">\r\n      <div *ngFor=\"let prescription of prescriptions.controls; let i = index\" [formGroupName]=\"i\" class=\"prescription-item\">\r\n        <h4>Prescription {{ i + 1 }}</h4>\r\n        <div>\r\n          <label for=\"medicineName\">Medicine Name</label>\r\n          <input id=\"medicineName\" formControlName=\"medicineName\" />\r\n          <div *ngIf=\"prescription.get('medicineName')?.invalid && prescription.get('medicineName')?.touched\" class=\"error\">\r\n            Medicine name is required.\r\n          </div>\r\n        </div>\r\n  \r\n        <div>\r\n          <label>Dosage</label>\r\n          <div class=\"btn-group\" role=\"group\">\r\n            <button type=\"button\" class=\"btn\" [ngClass]=\"{'btn-primary': prescription.get('dosage.morning')?.value, 'btn-outline-primary': !prescription.get('dosage.morning').value}\" (click)=\"toggleDosage(prescription, 'morning')\">Morning</button>\r\n            <button type=\"button\" class=\"btn\" [ngClass]=\"{'btn-primary': prescription.get('dosage.afternoon')?.value, 'btn-outline-primary': !prescription.get('dosage.afternoon').value}\" (click)=\"toggleDosage(prescription, 'afternoon')\">Afternoon</button>\r\n            <button type=\"button\" class=\"btn\" [ngClass]=\"{'btn-primary': prescription.get('dosage.evening')?.value, 'btn-outline-primary': !prescription.get('dosage.evening').value}\" (click)=\"toggleDosage(prescription, 'evening')\">Evening</button>\r\n          </div>\r\n        </div>\r\n  \r\n        <div>\r\n          <label>Time of Dosage</label>\r\n          <div class=\"btn-group\" role=\"group\">\r\n            <button type=\"button\" class=\"btn\" [ngClass]=\"{'btn-primary': !prescription.get('afterMeals').value, 'btn-outline-primary': prescription.get('afterMeals').value}\" (click)=\"toggleMealTime(prescription, false)\">Before Meals</button>\r\n            <button type=\"button\" class=\"btn\" [ngClass]=\"{'btn-primary': prescription.get('afterMeals').value, 'btn-outline-primary': !prescription.get('afterMeals').value}\" (click)=\"toggleMealTime(prescription, true)\">After Meals</button>\r\n          </div>\r\n        </div>\r\n  \r\n        <div>\r\n          <label for=\"duration\">Duration (Days)</label>\r\n          <input id=\"duration\" type=\"number\" formControlName=\"duration\" />\r\n          <div *ngIf=\"prescription.get('duration')?.invalid && prescription.get('duration')?.touched\" class=\"error\">\r\n            Duration is required and must be at least 1 day.\r\n          </div>\r\n        </div>\r\n  \r\n        <button type=\"button\" (click)=\"removePrescription(i)\" class=\"btn btn-danger\">Delete</button>\r\n      </div>\r\n    </div>\r\n  \r\n    <button type=\"button\" (click)=\"addPrescription()\" class=\"btn btn-primary\">Add Prescription</button>\r\n    <button type=\"submit\" class=\"btn btn-success\">Save</button>\r\n  </form>\r\n  \r\n  <style>\r\n    .grid-container {\r\n      display: grid;\r\n      grid-template-columns: repeat(2, 1fr);\r\n      gap: 20px;\r\n    }\r\n  \r\n    .grid-item {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n  \r\n    .prescription-item {\r\n      margin-bottom: 20px;\r\n      padding: 10px;\r\n      border: 1px solid #ccc;\r\n      border-radius: 5px;\r\n    }\r\n  \r\n    .error {\r\n      color: red;\r\n      font-size: 0.8em;\r\n    }\r\n  \r\n    .btn-group .btn {\r\n      margin-right: 5px;\r\n    }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}